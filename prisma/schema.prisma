// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  username String

  money       Int?
  avatarUrl   String?
  volume      String?
  description String?
  instagram   String?
  twitter     String?
  youtube     String?
  discord     String?

  role           Role   @default(USER)
  hashedPassword String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userFollowersId Int?
  userFollowedId  Int?
  userFollowers   User?  @relation("UserFollowers", fields: [userFollowersId], references: [id])
  userFollowed    User?  @relation("UserFollowed", fields: [userFollowedId], references: [id])
  followers       User[] @relation("UserFollowers")
  followed        User[] @relation("UserFollowed")

  UserNft UserNft?
}

model UserNft {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  nftOwned       NFT[]        @relation("Owner")
  nftCreated     NFT[]        @relation("Creator")
  nftCollections Collection[]

  updatedAt DateTime @updatedAt
}

model Collection {
  id    Int    @id @default(autoincrement())
  title String

  collectionOwner UserNft? @relation(fields: [collectionId], references: [id])
  collectionId    Int

  nfts NFT[] @relation("Collection")
}

model NFT {
  id    Int    @id @default(autoincrement())
  title String @unique

  price         Int
  data          DateTime
  highestBid    Int
  description   String
  etherscanLink String
  originLink    String
  tags          String[]

  owner   UserNft? @relation("Owner", fields: [ownerId], references: [id])
  ownerId Int?

  creator   UserNft @relation("Creator", fields: [creatorId], references: [id])
  creatorId Int

  collection   Collection? @relation("Collection", fields: [collectionId], references: [id])
  collectionId Int?
}

enum Role {
  USER
  ADMIN
}
